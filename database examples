/*COMANDOS QUERY BANCO DE DADOS MySQL*/
CREATE DATABASE ; /*CRIA NOVO BANCO DE DADOS*/
USE ;/*USA BANCO DE DADOS SELECIONADO*/
CREATE TABLE ;/*CRIA NOVA TABELA DENTRO DO BANCO DE DADOS*/
SHOW TABLES;/*RETORNA TABELAS E VIEWS DENTRO DO BANCO DE DADOS*/
SHOW DATABASES;/*RETORNA TODOS OS BANCOS DE DADOS DO SGBD*/
SHOW CREATE TABLE ;/*RETORNA QUERY QUE CRIOU TABELA*/
DESC ;/*MOSTRA A ESTRUTURA DA TABELA*/
STATUS;/*RETORNA STATUS DE TODO O SGBD*/
DROP TABLE ;/*DELETA TABELA DO BANCO DE DADOS*/
DROP VIEW ;/*DELETA VIEWS DO BANCO DE DADOS*/
DROP PROCEDURE ;/*DELETA PROCEDURE DO BD*/
SELECT NOW;/*RETORNA DATA/HORA ATUAL*/
INNER JOIN;/* JUNTA TABELAS NA MESMA QUERY */
ALTER TABLE CHANGE;/*ALTERA O NOME DA TABELA E O TIPO*/
ALTER TABLE ADD;/*ADICIONA COLUNA NA TABELA*/
AS ; /*NOMEIA COLUNA AO RETORNAR QUERY*/
IFNULL() AS;/*RETORNA NULOS COM MSG*/ 


/*EXEMPLOS DE INSERÇÃO*/
/*SINTAXE BÁSICA DE INSERÇÃO DE DADOS NA TABELA*/
/*FORMA 01 – EXCLUINDO AS COLUNAS */
INSERT INTO CLIENTE VALUES('JOAO','M','JOAO@GMAIL.COM','03652544789','51996325889','PADRE CACIQUE 520 - CENTRO - OSORIO-RS');

/*FORMA 02 -COLOCANDO AS COLUNAS - MELHOR FORMA*/
INSERT INTO CLIENTE(NOME,SEXO,ENDERECO,TELEFONE,CPF) VALUES('LILIAN','F','SENADOR SOARES - TIJUCA - RIO DE JANEIRO - RJ','947785696',887774856);

/*FORMA 03 - INSERTCOMPACTO - SOMENTE MYSQL*/
INSERT INTO CLIENTE VALUES('ANA','F','ANA@GLOBO.COM',85548962,'548556985','PRES ANTONIO CARLOS - CENTRO - SAO PAULO- SP'),
('CARLA','F','CARLA@TERATI.COM.BR',7745828,'66587458','SAMUEL SILVA - CENTRO - BELO HORIZONTE - MG');

/*INSERE VALORES NOBANCO.TABELA SELECIONADO*/
INSERT INTO BANCO.TABELA VALUES(NULL,1000,'TESTE',0.0);


/*EXEMPLOS DE TIPAGEM DE TABELAS*/
/*TIPAGEM DE TABELAS DE BANCO DE DADOS*/
CHAR E VARCHAR --CARACTERES LITERAIS
INT E FLOAT --NUMEROS
BLOB --OBJETOS COMO FOTO E DOCUMENTOS
TEXT --TEXTOS EXTENSOS
INT PRIMARY KEY --IDENTIFICADOR ÚNICO DA TABELA
UNIQUE --SÓ PODE SER REGISTRADO UMA VEZ NO BANCO DE DADOS 1X1 A AUSENCIA DE UNIQUE TRANSFORMA O DADO EM 1XN
FOREIGN KEY --CHAVE ESTRANGEIRA CRIADA NA TABELA 
REFERENCES TABELA(COLUNA) --REFERENCIA TABELA E COLUNA ESTRANGEIRA
NULL --VAZIO
NOT NULL --NÃO VAZIO


/*CRIA BANCO DE DADOS DE BACKUP*/
--COM VALOR ORIGINAL, VALOR ALTERADO, DATA, HORA E USUÁRIO QUE ALTEROU
CREATE DATABASE BACKUP;
CREATE TABLE BKP_TABELA( --TABELA
	IDBACKUP INT PRIMARY KEY AUTO_INCREMENT,
	IDTABELA INT,
	NOME VARCHAR(30),
	VALOR_ORIGINAL FLOAT(10,2),
	VALOR_ALTERADO FLOAT(10,2),
	DATA DATETIME, -- DATE GRAVA DATA, DATETIME GRAVA DATA E HORA
	USUARIO VARCHAR(30),
	EVENTO CHAR(1)
	
);

/*EXEMPLO DE CRIAÇÃO DE BANCO DE DADOS - CRIA TABELAS SEPARANDO VALORES VETORIZADOS*/
CREATE TABLE CLIENTE (
    IDCLIENTE INT PRIMARY KEY AUTO_INCREMENT,/* PRIMARY KEY IDENTIFICADOR ÚNICO DA TABELA */
    NOME VARCHAR(100) NOT NULL, /*NOT NULL NESTE CASO OBRIGA APLICAÇÃO RETORNAR REGISTRO*/
    SEXO ENUM('M','F') NOT NULL, /*ENUM É UM DOMINIO, QUE POSSUI OPÇÕES FIXAS, ENUM SÓ TEM NO MYSQL*/
    EMAIL VARCHAR (100) UNIQUE, /*SÓ PODE SER REGISTRADO UMA VEZ NO BANCO DE DADOS*/
    CPF VARCHAR (15) UNIQUE
);

CREATE TABLE ENDERECO (
    IDENDERECO INT PRIMARY KEY AUTO_INCREMENT,
    RUA VARCHAR(100) NOT NULL,
    BAIRRO VARCHAR(100) NOT NULL,
    CIDADE VARCHAR(100) NOT NULL,
    ESTADO CHAR(2) NOT NULL,
    ID_CLIENTE INT UNIQUE,
    FOREIGN KEY(ID_CLIENTE)
    REFERENCES CLIENTE (IDCLIENTE)
);

CREATE TABLE TELEFONE (
    IDTELEFONE INT PRIMARY KEY AUTO_INCREMENT,
    TIPO ENUM('RES','COM','CEL') NOT NULL,
    NUMERO VARCHAR(10) NOT NULL,
    ID_CLIENTE INT,
    FOREIGN KEY(ID_CLIENTE)
    REFERENCES CLIENTE (IDCLIENTE)
);


/*EXEMPLOS DE SELECT*/
SELECT NOME, SEXO, EMAIL /*PROJEÇÃO*/
FROM CLIENTE /*ORIGEM*/
WHERE SEXO = 'F'; /*SELEÇÃO*/

SELECT MAX(COLUNA) AS MAIOR_COLUNA --RETORNA O VALOR MÁXIMO DE UMA COLUNA
FROM TABELA;

SELECT MIN(COLUNA) AS MENOR_COLUNA --RETORNA O VALOR MÍNIMO DE UMA COLUNA
FROM TABELA;

SELECT AVG(COLUNA) AS MEDIA_COLUNA --RETORNA VALOR MÉDIO DE UMA COLUNA
FROM TABELA

SELECT MAX(COLUNA1) AS MAIOR_COLUNA1, --RETORNA OS VALORES MÁXIMO, MÍNIMO E MÉDIA DE UMA COLUNA
       MIN(COLUNA1) AS MENOR_COLUNA1,
       AVG(COLUNA1) AS MEDIA_COLUNA1
FROM TABELA;

SELECT MAX(COLUNA) AS MAX_COLUNA, 
       MIN(COLUNA) AS MIN_COLUNA,
	   TRUNCATE(AVG(COLUNA),2) AS MEDIA_COLUNA --TRUNCATE NECESSITA DE DOIS PARAMETROS, UM NUMERO OU COLUNA E A QUANTIDADE DE CASAS DECIMAIS DEPOIS DA VIRGULA
	   FROM TABELA;

SELECT SUM(JANEIRO) AS TOTAL_JAN, --SUM SOMA A COLUNA E RETORNA O RESULTADO
	   SUM(FEVEREIRO) AS TOTAL_FEV,
	   SUM(MARCO) AS TOTAL_MAR
FROM VENDEDORES;

SELECT SEXO, SUM(MARCO) AS TOTAL_MARCO --SOMA OS VALORES DA LISTA AGRUPADO POR SEXO 
FROM VENDEDORES
GROUP BY SEXO;

--JUNÇÃO = JOIN
 SELECT NOME, SEXO, BAIRRO, CIDADE /*PROJEÇÃO*/
 FROM CLIENTE, ENDERECO /*ORIGEM*/
 WHERE IDCLIENTE = ID_CLIENTE /*SELEÇÃO*/
 AND SEXO = 'F'; /*TABELA VERDADE*/

 SELECT NOME, SEXO, BAIRRO, CIDADE/*PROJEÇÃO*/
 FROM CLIENTE /*ORIGEM*/
 INNER JOIN ENDERECO /*JUNÇÃO*/
 ON IDCLIENTE = ID_CLIENTE
 WHERE SEXO = 'F';/*SELEÇÃO*/

 SELECT NOME, SEXO, EMAIL, TIPO, NUMERO/*PROJEÇÃO*/
 FROM CLIENTE/*ORIGEM*/
 INNER JOIN TELEFONE/*JUNÇÃO*/
 ON IDCLIENTE = ID_CLIENTE;

 --JUNÇÃO COM PONTEIRAMENTO
SELECT   C.NOME, C.EMAIL, T.NUMERO AS CELULAR /* PROJECAO */
FROM CLIENTE C /* ORIGEM */
INNER JOIN ENDERECO E /*JUNCAO */
ON C.IDCLIENTE = E.ID_CLIENTE /*JUNCAO CONDICAO */
INNER JOIN TELEFONE T /*JUNCAO */
ON C.IDCLIENTE = T.ID_CLIENTE /*JUNCAO CONDICAO*/
WHERE TIPO = 'CEL' AND ESTADO = 'RJ'; /*SELECAO*/

--SUBQUERYS
SELECT NOME, MARCO FROM VENDEDORES --RETORNA VALOR DE UMA QUERY DENTRO DE UMA QUERY
WHERE MARCO = (SELECT MIN(MARCO) FROM VENDEDORES);

SELECT NOME, MARCO FROM VENDEDORES
WHERE MARCO > (SELECT AVG(MARCO) FROM VENDEDORES);

SELECT NOME, MARCO FROM VENDEDORES
WHERE MARCO > (SELECT MAX(MARCO) FROM VENDEDORES);

SELECT NOME, --OPERAÇÕES EM LINHA
	   JANEIRO,
	   FEVEREIRO,
	   MARCO,
	   (JANEIRO+FEVEREIRO+MARCO) AS "TOTAL", --TOTAL VENDIDO NO PERIODO POR CADA VENDEDOR
	   (JANEIRO+FEVEREIRO+MARCO) * .25 AS "DESCONTO", --DESCONTO DE 25%
     TRUNCATE((JANEIRO+FEVEREIRO+MARCO)/3,2) AS "MEDIA" --MEDIA VENDIDA NO PERIODO POR CADA VENDEDOR
FROM VENDEDORES;

SELECT CONSTRAINT_SCHEMA AS "BANCO", --retorna constraints de determinado banco
	   TABLE_NAME AS "TABELA",
	   CONSTRAINT_NAME AS "NOME REGRA",
	   CONSTRAINT_TYPE AS "TIPO"
	   FROM TABLE_CONSTRAINTS
WHERE CONSTRAINT_SCHEMA = 'COMERCIO';

SELECT --AUTORELACIONAMENTO
C.NOME AS CURSO, --EXEMPLO DE AUTORELACIONAMENTO NA MESMA TABELA
C.VALOR AS VALOR, 
C.HORAS AS CARGA, 
IFNULL(P.NOME, "---") AS PREREQ
FROM CURSOS C LEFT JOIN CURSOS P 
ON P.IDCURSO = C.ID_PREREQ;


/*DELETE - SEMPRE REVISAR ANTES 'SELECT'*/
SELECT * FROM CLIENTE/*REVISAR*/
WHERE IDCLIENTE = 6;

DELETE FROM CLIENTE /*DELETAR*/
WHERE IDCLIENTE = 6;


/*CRIA VIEWS*/
CREATE VIEW V_RELATORIO AS --CRIA VIEW CONFORME QUERY
SELECT C.NOME, 
		C.SEXO, 
		IFNULL(C.EMAIL,'CLIENTE SEM EMAIL') AS EMAIL, 
		T.TIPO, 
		T.NUMERO, 
		E.BAIRRO, 
		E.CIDADE, 
		E.ESTADO
FROM CLIENTE C 
INNER JOIN TELEFONE T 
ON C.IDCLIENTE = T.ID_CLIENTE
INNER JOIN ENDERECO E 
ON C.IDCLIENTE = E.ID_CLIENTE;

SELECT NOME, NUMERO, ESTADO --QUERY QUE RETORNA RESULTADO DO VIEW
FROM V_RELATORIO;

SELECT * FROM RELATORIO; -- CHAMA VIEW CRIADA PELO NOME

DROP VIEW RELATORIO; --APAGA VIEWS

UPDATE V_RELATORIO SET NOME = 'JOSE' WHERE NOME = 'JORGE'; --ATUALIZA VIEWS


/*ALTER TABLE*/
ALTER TABLE PRODUTO 
CHANGE PRECO VALOR_UNITARIO INT(10) NOT NULL; --ALTERA NOME  E TIPO

ALTER TABLE PRODUTO 
CHANGE VALOR_UNITARIO VALOR_UNITARIO INT(11) NOT NULL; --ALTERA TIPO MANTEM O NOME

--MODIFY
ALTER TABLE PRODUTO
MODIFY VALOR_UNITARIO FLOAT(10,2) NOT NULL; --ALTERA TIPO

--ADICIONANDO COLUNA
ALTER TABLE PRODUTO
ADD PESO FLOAT(10,2) NOT NULL; --ADICIONA COLUNA NA TABELA

--APAGAR COLUNA
ALTER TABLE PRODUTO --DROPA COLUNA SOLICITADA
DROP COLUMN PESO;

--ADICIONANDO COLUNA NA ORDEM ESPECIFICA
ALTER TABLE PRODUTO --ADD COLUNA PESO DEPOIS DE NOME_PRODUTO
ADD COLUMN PESO FLOAT(10,2) NOTT NULL
AFTER NOME_PRODUTO;

ALTER TABLE PRODUTO --ADD COLUNA PESO NA PRIMEIRA POSIÇÃO
ADD COLUMN PESO FLOAT(10,2) NOTT NULL
FIRST;

ALTER TABLE TABELA --ADICIONA PRIMARY KEY
ADD PRIMARY KEY (COLUNA1);

ALTER TABLE TABELA --ADICIONA COLUNA, SEMPRE ULTIMA POSIÇÃO
ADD COLUNA varchar(30);

ALTER TABLE TABELA --ADICIONA COLUNA EM POSIÇÃO DETERMINADA
ADD COLUMN COLUNA4 VARCHAR(30) NOT NULL UNIQUE
AFTER COLUNA3;

ALTER TABLE TABELA --MODIFICA O CAMPO DA COLUNA
 MODIFY COLUNA2 DATE NOT NULL;

ALTER TABLE TABELA --RENOMEIA COLUNA
RENAME PESSOA;

ALTER TABLE TABELA --ADD CONSTRAINT FOREIGN KEY
ADD FOREIGN KEY(ID_PESSOA)
REFERENCES PESSOA(COLUNA1);

ALTER TABLE TELEFONE --deleta constraint
DROP FOREIGN KEY FK_CLIENTE_TELEFONE;

/*EXEMPLOS DE PROCEDURES*/
DELIMITER $

CREATE PROCEDURE NOME()
BEGIN

  QUERY;

END
$

CALL NOME_PROCEDURE() --CHAMA PROCEDURE

DROP PROCEDURE NOME_PROCEDURE; --DELETA PROCEDURE

DELIMITER $ --PROCEDURE COM PARAMETROS

CREATE PROCEDURE CONTA(NUMERO1 INT, NUMERO2 INT) 
BEGIN
	
	SELECT NUMERO1 + NUMERO2 AS CONTA;

END
$

DELIMITER $ --PROCEDURE ATRELADO AO BANCO DE DADOS
CREATE PROCEDURE CAD_CURSO(P_NOME VARCHAR(30),
                          P_HORAS INT(30),
                          P_PRECO FLOAT (10,2))
BEGIN
  INSERT INTO CURSOS VALUES(NULL,P_NOME,P_HORAS,P_PRECO);

END
$

DELIMITER $ --PROCEDURE COM CURSORES E VARIÁVEIS

CREATE PROCEDURE INSEREDADOS() 
BEGIN
	DECLARE FIM INT DEFAULT 0; --VARIAVEL REGRA PARA FINALIZAR LOOP
	DECLARE VAR1, VAR2, VAR3, VTOTAL, VMEDIA INT; --VARIAVEIS DE VALORES
	DECLARE VNOME VARCHAR(50); --VARIAVEL DOS NOMES 
		
	DECLARE REG CURSOR FOR(
		SELECT NOME, JAN, FEV, MAR FROM VENDEDORES
	);
		
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET FIM = 1; --FINALIZA LOOP ELSE
		
	OPEN REG;
		
		 REPEAT --INICIA LOOP
		
			FETCH REG INTO VNOME, VAR1, VAR2, VAR3; --FETCH ME TRAGA O PROXIMO
			    IF NOT FIM THEN --SE FIM NÃO FOR VERDADEIRO, CONTINUE
				 
                    SET VTOTAL = VAR1 + VAR2 + VAR3;
				   
                    SET VMEDIA = VTOTAL / 3;
				  
                    INSERT INTO VEND_TOTAL VALUES(VNOME,VAR1,VAR2,VAR3,VTOTAL,VMEDIA); --INSERE VARIÁVEIS NA TABELA
				END IF;
			
		UNTIL FIM END REPEAT;
		
	CLOSE REG;
END
$

/*EXEMPLOS DE TRIGGERS*/
DELIMITER $
CREATE TRIGGER NOME
BEFORE/AFTER INSERT/DELETE/UPDATE ON TABELA
FOR EACH ROW (PARA CADA LINHA)
BEGIN 

		QUALQUER COMANDO SQL

END 
$

DELIMITER $
CREATE TRIGGER BACKUP_PRODUTO --TRIGGER PARA ADICIONAR DADOS NOVOS NO BACKUP
BEFORE INSERT ON PRODUTO
FOR EACH ROW
BEGIN
	
	INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,NEW.IDPRODUTO,
	NEW.NOME,NEW.VALOR);

END
$

DELIMITER $
CREATE TRIGGER BACKUP_PRODUTO_DEL --TRIGGER PARA ADICIONAR DADOS DELETADOS NO BACKUP
BEFORE DELETE ON PRODUTO
FOR EACH ROW
BEGIN
	
	INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,OLD.IDPRODUTO,
	OLD.NOME,OLD.VALOR);

END
$

DELIMITER $
CREATE TRIGGER AUDIT_PROD --TRIGGER SALVA PRODUTO COM ID NOME PRECO ORIGINAL PRECO ALTERADO QUEM ALTEROU E QUANDO
AFTER UPDATE ON PRODUTO
FOR EACH ROW
BEGIN

	INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,OLD.IDPRODUTO,OLD.NOME,
	OLD.VALOR,NEW.VALOR,NOW(),CURRENT_USER(),'U');
	
END
$

/*PRIMEIRA FORMA NORMAL:

1-PRIMEIRA REGRA: TODO CAMPO VETORIZADO SE TORNARÁ OUTRA TABELA
(AMARELO, AZUL LARANJA, VERDE) --> CORES
(KA, FIESTA, UNO. CIVIC) --> CARROS

2-SEGUNDA REGRA: TODO CAMPO MULTIVALORADO SE TORNARÁ OUTRA TABELA,
ENDERECO: RUA, NUMERO, BAIRRO, CIDADE, ESTADO, PAIS.

3-TERCEIRA REGRA: TODA TABELA NECESSITA DE PELO MENOS 1 CAMPO QUE IDENTIFIQUE TODO O REGISTRO COMO SENDO UNICO
CHAVE PRIMARIA (natural/artificial)
*/

/*SEGUNDA FORMA NORMAL
CAMPOS NÃO CHAVE DEPENDEM DA TOTALIDADE DA CHAVE*/

/*TERCEIRA FORMA NORMAL
DEPENDENCIA TRANSITIVA
CAMPOS NÃO CHAVE QUE DEPENDEM DE OUTROS CAMPOS NÃO CHAVE VIRAM OUTRA TABELA
*/